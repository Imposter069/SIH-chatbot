from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher

class ActionProvidePrecaution(Action):

    def name(self):
        return "action_provide_precaution"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: dict):

        disease = next(tracker.get_latest_entity_values("disease"), None)

        if not disease:
            dispatcher.utter_message(response="utter_ask_disease")
            return []

        # Precaution data
        precautions = {
            "malaria": {
                "en": "Malaria Precautions:\n1. Consult nearest hospital ЁЯПе\n2. Avoid oily food ЁЯНФ\n3. Avoid outside food ЁЯЪл\n4. Keep hydrated ЁЯТз",
                "hi": "рдорд▓реЗрд░рд┐рдпрд╛ рд╕реЗ рдмрдЪрд╛рд╡:\n1. рдирд┐рдХрдЯрддрдо рдЕрд╕реНрдкрддрд╛рд▓ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рдХрд░реЗрдВ ЁЯПе\n2. рддреИрд▓реАрдп рднреЛрдЬрди рд╕реЗ рдмрдЪреЗрдВ ЁЯНФ\n3. рдмрд╛рд╣рд░ рдХрд╛ рдЦрд╛рдирд╛ рди рдЦрд╛рдПрдВ ЁЯЪл\n4. рд╣рд╛рдЗрдбреНрд░реЗрдЯреЗрдб рд░рд╣реЗрдВ ЁЯТз"
            },
            "diabetes": {
                "en": "Diabetes Precautions:\n1. Regular exercise ЁЯПГ\n2. Eat a balanced diet ЁЯеЧ\n3. Monitor blood sugar ЁЯй╕\n4. Avoid excess sugar ЁЯНм",
                "hi": "рдбрд╛рдпрдмрд┐рдЯреАрдЬрд╝ рд╕реЗ рдмрдЪрд╛рд╡:\n1. рдирд┐рдпрдорд┐рдд рд╡реНрдпрд╛рдпрд╛рдо рдХрд░реЗрдВ ЁЯПГ\n2. рд╕рдВрддреБрд▓рд┐рдд рдЖрд╣рд╛рд░ рд▓реЗрдВ ЁЯеЧ\n3. рдмреНрд▓рдб рд╢реБрдЧрд░ рдХреА рдЬрд╛рдВрдЪ рдХрд░рддреЗ рд░рд╣реЗрдВ ЁЯй╕\n4. рдЕрдзрд┐рдХ рд╢рдХреНрдХрд░ рд╕реЗ рдмрдЪреЗрдВ ЁЯНм"
            },
            "рдорд▓реЗрд░рд┐рдпрд╛": {
                "en": "Malaria Precautions:\n1. Consult nearest hospital ЁЯПе\n2. Avoid oily food ЁЯНФ\n3. Avoid outside food ЁЯЪл\n4. Keep hydrated ЁЯТз",
                "hi": "рдорд▓реЗрд░рд┐рдпрд╛ рд╕реЗ рдмрдЪрд╛рд╡:\n1. рдирд┐рдХрдЯрддрдо рдЕрд╕реНрдкрддрд╛рд▓ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рдХрд░реЗрдВ ЁЯПе\n2. рддреИрд▓реАрдп рднреЛрдЬрди рд╕реЗ рдмрдЪреЗрдВ ЁЯНФ\n3. рдмрд╛рд╣рд░ рдХрд╛ рдЦрд╛рдирд╛ рди рдЦрд╛рдПрдВ ЁЯЪл\n4. рд╣рд╛рдЗрдбреНрд░реЗрдЯреЗрдб рд░рд╣реЗрдВ ЁЯТз"
            },
            "рдбрд╛рдпрдмрд┐рдЯреАрдЬрд╝": {
                "en": "Diabetes Precautions:\n1. Regular exercise ЁЯПГ\n2. Eat a balanced diet ЁЯеЧ\n3. Monitor blood sugar ЁЯй╕\n4. Avoid excess sugar ЁЯНм",
                "hi": "рдбрд╛рдпрдмрд┐рдЯреАрдЬрд╝ рд╕реЗ рдмрдЪрд╛рд╡:\n1. рдирд┐рдпрдорд┐рдд рд╡реНрдпрд╛рдпрд╛рдо рдХрд░реЗрдВ ЁЯПГ\n2. рд╕рдВрддреБрд▓рд┐рдд рдЖрд╣рд╛рд░ рд▓реЗрдВ ЁЯеЧ\n3. рдмреНрд▓рдб рд╢реБрдЧрд░ рдХреА рдЬрд╛рдВрдЪ рдХрд░рддреЗ рд░рд╣реЗрдВ ЁЯй╕\n4. рдЕрдзрд┐рдХ рд╢рдХреНрдХрд░ рд╕реЗ рдмрдЪреЗрдВ ЁЯНм"
            }
        }

        # Detect language automatically
        lang = "hi" if any('\u0900' <= c <= '\u097F' for c in disease) else "en"
        response = precautions.get(disease, {}).get(lang, "I don't have data for this disease yet.")

        dispatcher.utter_message(text=response)
        return []
